<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>author</key>
	<string></string>
	<key>comments</key>
	<string></string>
	<key>isUsingConstrainedLayout</key>
	<true/>
	<key>keywords</key>
	<string></string>
	<key>mindMap</key>
	<dict>
		<key>associations</key>
		<array/>
		<key>color</key>
		<string>{0.000, 0.000, 0.000, 1.000}</string>
		<key>mainNodes</key>
		<array>
			<dict>
				<key>contentAlignment</key>
				<integer>1</integer>
				<key>fillColor</key>
				<string>{1.000, 1.000, 1.000, 1.000}</string>
				<key>isDecreasingBranchThickness</key>
				<true/>
				<key>isDrawingFill</key>
				<true/>
				<key>isLeftAligned</key>
				<false/>
				<key>location</key>
				<string>{-818.2578125, 131.90625}</string>
				<key>nodeID</key>
				<string>621CBA17-25BE-4927-AC5A-AD6C6880608E</string>
				<key>strokeColor</key>
				<string>{0.500, 0.500, 0.500, 1.000}</string>
				<key>strokeStyle</key>
				<integer>0</integer>
				<key>strokeWidth</key>
				<real>2</real>
				<key>subnodes</key>
				<array>
					<dict>
						<key>contentAlignment</key>
						<integer>1</integer>
						<key>fillColor</key>
						<string>{1.000, 1.000, 1.000, 1.000}</string>
						<key>isDecreasingBranchThickness</key>
						<true/>
						<key>isDrawingFill</key>
						<false/>
						<key>isLeftAligned</key>
						<false/>
						<key>location</key>
						<string>{-648.2578125, -1321.0814043209875}</string>
						<key>nodeID</key>
						<string>6049BE1A-448A-4C93-8349-DCFF18BFA10A</string>
						<key>strokeColor</key>
						<string>{1.000, 0.800, 0.400, 1.000}</string>
						<key>strokeStyle</key>
						<integer>0</integer>
						<key>strokeWidth</key>
						<real>6</real>
						<key>subnodes</key>
						<array/>
						<key>title</key>
						<dict>
							<key>constrainedWidth</key>
							<integer>300</integer>
							<key>htmlText</key>
							<string>&lt;p style='color: rgba(0, 255, 0, 1.000000); font: 14px "Lucida Grande"; text-align: left; -cocoa-font-postscriptname: "LucidaGrande"; '&gt;[Ruby is an OO language]  Ruby is a genuine objective-oriented language.&lt;/p&gt;</string>
							<key>shrinkToFitContent</key>
							<integer>1</integer>
							<key>text</key>
							<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red0\green255\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 [Ruby is an OO language]\uc0\u8232 \u8232 Ruby is a genuine objective-oriented language.}</string>
						</dict>
					</dict>
					<dict>
						<key>contentAlignment</key>
						<integer>1</integer>
						<key>fillColor</key>
						<string>{0.037, 0.160, 0.198, 1.000}</string>
						<key>isDecreasingBranchThickness</key>
						<true/>
						<key>isDrawingFill</key>
						<false/>
						<key>isLeftAligned</key>
						<false/>
						<key>location</key>
						<string>{-648.2578125, -973.08140432098753}</string>
						<key>nodeID</key>
						<string>F5AE379B-53F2-47E7-BD30-8D9BCD47A432</string>
						<key>strokeColor</key>
						<string>{0.450, 0.541, 0.020, 1.000}</string>
						<key>strokeStyle</key>
						<integer>0</integer>
						<key>strokeWidth</key>
						<real>6</real>
						<key>subnodes</key>
						<array>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-286.2578125, -1237.0814043209875}</string>
								<key>nodeID</key>
								<string>66D1CD11-E3CC-4873-A6A9-971D29B5661F</string>
								<key>strokeColor</key>
								<string>{0.450, 0.541, 0.020, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;Ruby Comments start with a &amp;quot;#&amp;quot; character and run to the end of line. Indentation is not significant (making two character will be good enough)&lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 Ruby Comments start with a "#" character and run to the end of line. Indentation is not significant (making two character will be good enough)}</string>
								</dict>
							</dict>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-286.2578125, -1157.0814043209875}</string>
								<key>nodeID</key>
								<string>4902E509-D7D1-47DA-850E-17941192F35D</string>
								<key>strokeColor</key>
								<string>{0.450, 0.541, 0.020, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>555</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;{def} method are defined by def, followed by the method name and the method&amp;apos;s parameters between parentheses. Ruby does not use braces to delimit the bodies of compound statements and definitions. {end} will close the function. Most of the case, Ruby do not parentheses with parameters. puts (xxx) puts xxx it is same.&lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>0</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 \{def\}\uc0\u8232 method are defined by def, followed by the method name and the method's parameters between parentheses. Ruby does not use braces to delimit the bodies of compound statements and definitions. \{end\} will close the function. Most of the case, Ruby do not parentheses with parameters.\u8232 puts (xxx)\u8232 puts xxx\u8232 it is same.}</string>
								</dict>
							</dict>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-286.2578125, -1013.0814043209875}</string>
								<key>nodeID</key>
								<string>A2BEB54D-103D-458D-9658-87801EB1A414</string>
								<key>strokeColor</key>
								<string>{0.450, 0.541, 0.020, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>551</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;#{expression} is replaced by the value of expression.  result = &amp;quot;Result , #{name}&amp;quot; when ruby constructs this string object, it looks at the current value of name and substitutes it into the string.  Arbitary complex expressions are allowed in the #{…} construct.  #{name.capitalize} A ruby method is the value of the last expression evaluated, so we can get rid of the temporary variable and the return statement altogether.&lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>0</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 #\{expression\}\uc0\u8232 is replaced by the value of expression. \u8232 result = "Result , #\{name\}"\u8232 when ruby constructs this string object, it looks at the current value of name and substitutes it into the string. \u8232 Arbitary complex expressions are allowed in the #\{\'85\} construct. \u8232 #\{name.capitalize\}\u8232 A ruby method is the value of the last expression evaluated, so we can get rid of the temporary variable and the return statement altogether.}</string>
								</dict>
							</dict>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-286.2578125, -853.08140432098753}</string>
								<key>nodeID</key>
								<string>E7E987F6-E1D2-43ED-B3E3-8E9761F6DF87</string>
								<key>strokeColor</key>
								<string>{0.450, 0.541, 0.020, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>551</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;Ruby uses a convention that may seem strange at first, the first characters of a name indicate how the name is used.   -&amp;gt;Local variables, method prarmeters, and method names should all start with a lowercase letter or with an underscore.  -&amp;gt;Global variable are prefixed with a dollar sign ($), and instance variables begin with an &amp;quot;at&amp;quot; @ sign. Class variables start with two &amp;quot;at&amp;quot;@@ signs.  -&amp;gt; Class names,module names,and constants must start with an uppercase letter.   A name can be any combination of lettres, digits,and underscores. However, by convention, multiword instance variables are written with underscores between the words, and multiword class names are written in MixedCase(with each word capitalized). Method names may end with ?,!,and =.&lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>0</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 Ruby uses a convention that may seem strange at first, the first characters of a name indicate how the name is used. \uc0\u8232 \u8232 -&gt;Local variables, method prarmeters, and method names should all start with a lowercase letter or with an underscore.\u8232 \u8232 -&gt;Global variable are prefixed with a dollar sign ($), and instance variables begin with an "at" @ sign. Class variables start with two "at"@@ signs.\u8232 \u8232 -&gt; Class names,module names,and constants must start with an uppercase letter. \u8232 \u8232 A name can be any combination of lettres, digits,and underscores. However, by convention, multiword instance variables are written with underscores between the words, and multiword class names are written in MixedCase(with each word capitalized). Method names may end with ?,!,and =.}</string>
								</dict>
							</dict>
						</array>
						<key>title</key>
						<dict>
							<key>constrainedWidth</key>
							<integer>300</integer>
							<key>htmlText</key>
							<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;[Basic Ruby]  Ruby syntax is clean. do not need semicolons at the ends of statements as long as you put each statement on a separate line. &lt;/p&gt;</string>
							<key>shrinkToFitContent</key>
							<integer>1</integer>
							<key>text</key>
							<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 [Basic Ruby]\uc0\u8232 \u8232 Ruby syntax is clean. do not need semicolons at the ends of statements as long as you put each statement on a separate line. }</string>
						</dict>
					</dict>
					<dict>
						<key>contentAlignment</key>
						<integer>1</integer>
						<key>fillColor</key>
						<string>{0.037, 0.160, 0.198, 1.000}</string>
						<key>isDecreasingBranchThickness</key>
						<true/>
						<key>isDrawingFill</key>
						<false/>
						<key>isLeftAligned</key>
						<false/>
						<key>location</key>
						<string>{-648.2578125, -280.09374999999989}</string>
						<key>nodeID</key>
						<string>584686F1-8569-4639-80E9-DD2D89DEED6B</string>
						<key>strokeColor</key>
						<string>{0.747, 0.236, 0.101, 1.000}</string>
						<key>strokeStyle</key>
						<integer>0</integer>
						<key>strokeWidth</key>
						<real>6</real>
						<key>subnodes</key>
						<array>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-332.2578125, -597.08140432098753}</string>
								<key>nodeID</key>
								<string>52BE4F88-E4AB-4832-A0B6-4063B16CA939</string>
								<key>strokeColor</key>
								<string>{0.747, 0.236, 0.101, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;Both of them store collections of object, accessible using a key. Array key is an integer, whereas hashes support any objects as a key.  Both arrays and hashes grow as needed more flexibility And both of them could hold objects with different type each. &lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 Both of them store collections of object, accessible using a key.\uc0\u8232 Array key is an integer, whereas hashes support any objects as a key. \u8232 Both arrays and hashes grow as needed more flexibility And both of them could hold objects with different type each. }</string>
								</dict>
							</dict>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-332.2578125, -469.08140432098753}</string>
								<key>nodeID</key>
								<string>BC9B4D65-16D7-45F6-B774-A4558011E798</string>
								<key>strokeColor</key>
								<string>{0.747, 0.236, 0.101, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;{array} or [..,..,,….] create and initialize a new array object using an array, or a set of elements between square brackets. Note that Ruby array indices start at Zero!!  In ruby, nil is an object, just like any other, that happens to represent nothing. &lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 \{array\} or [..,..,,\'85.]\uc0\u8232 create and initialize a new array object using an array, or a set of elements between square brackets. Note that Ruby array indices start at Zero!!\u8232 \u8232 In ruby, nil is an object, just like any other, that happens to represent nothing. }</string>
								</dict>
							</dict>
							<dict>
								<key>attachment</key>
								<dict>
									<key>fileName</key>
									<string>1864A173-D4D7-4BF7-A7E9-A8FC0525DF75.png</string>
									<key>size</key>
									<string>{100, 31.97530864197531}</string>
									<key>type</key>
									<integer>2</integer>
								</dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<true/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-332.2578125, -325.08140432098753}</string>
								<key>nodeID</key>
								<string>42C316B1-DA57-463C-8F42-B50C421DB0F8</string>
								<key>strokeColor</key>
								<string>{0.747, 0.236, 0.101, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;Example_Variables_and_class_name&lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 Example_Variables_and_class_name}</string>
								</dict>
							</dict>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-332.2578125, -235.10609567901221}</string>
								<key>nodeID</key>
								<string>4577148B-9CE5-4272-BF50-EEBD9C652169</string>
								<key>strokeColor</key>
								<string>{0.747, 0.236, 0.101, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;%w{xx,xx,xx,xx} sometimes creating arrays of words can be a pain, what with all the quotes and comma.  Ruby provide a shortcut: %w does just what we want: a = %w{ant  bee cat dog elk 1}&lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 %w\{xx,xx,xx,xx\}\uc0\u8232 sometimes creating arrays of words can be a pain, what with all the quotes and comma. \u8232 Ruby provide a shortcut: %w does just what we want:\u8232 a = %w\{ant  bee cat dog elk 1\}}</string>
								</dict>
							</dict>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-332.2578125, -123.10609567901221}</string>
								<key>nodeID</key>
								<string>C3B75881-F4EF-4DA6-AE21-3D3CCBF14B79</string>
								<key>strokeColor</key>
								<string>{0.747, 0.236, 0.101, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>782</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;{=&amp;gt;} Ruby hash ruby hash are similar to arrays. A hash litral uses braces rather than square brackets. The literal must supply two objects for every entry, one for key, the other for value.  the key and value are normally separated by =&amp;gt; ----- {key} =&amp;gt; {value} inst_section = { 	&amp;apos;cell&amp;apos; =&amp;gt; &amp;apos;string&amp;apos;, 	&amp;apos;clarinet&amp;apos; =&amp;gt; &amp;apos;woodwind&amp;apos; } -----  p inst_section[&amp;apos;clarinet&amp;apos;] the p method could print nil explicitly&lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>0</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 \{=&gt;\} Ruby hash\uc0\u8232 ruby hash are similar to arrays. A hash litral uses braces rather than square brackets. The literal must supply two objects for every entry, one for key, the other for value. \u8232 the key and value are normally separated by =&gt;\u8232 -----\u8232 \{key\} =&gt; \{value\}\u8232 inst_section = \{\u8232 	'cell' =&gt; 'string',\u8232 	'clarinet' =&gt; 'woodwind'\u8232 \}\u8232 -----\u8232 \u8232 p inst_section['clarinet']\u8232 the p method could print nil explicitly}</string>
								</dict>
							</dict>
						</array>
						<key>title</key>
						<dict>
							<key>constrainedWidth</key>
							<integer>300</integer>
							<key>htmlText</key>
							<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;[Arrays and Hashes]  ruby&amp;apos;s arrays and hashes are indexed collections. &lt;/p&gt;</string>
							<key>shrinkToFitContent</key>
							<integer>1</integer>
							<key>text</key>
							<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 [Arrays and Hashes]\uc0\u8232 \u8232 ruby's arrays and hashes are indexed collections. }</string>
						</dict>
					</dict>
					<dict>
						<key>contentAlignment</key>
						<integer>1</integer>
						<key>fillColor</key>
						<string>{0.037, 0.160, 0.198, 1.000}</string>
						<key>isDecreasingBranchThickness</key>
						<true/>
						<key>isDrawingFill</key>
						<false/>
						<key>isLeftAligned</key>
						<true/>
						<key>location</key>
						<string>{-1177.2578125, 117.90625}</string>
						<key>nodeID</key>
						<string>542C8AE0-2FDD-481C-9247-0942816B86AB</string>
						<key>strokeColor</key>
						<string>{0.747, 0.236, 0.101, 1.000}</string>
						<key>strokeStyle</key>
						<integer>0</integer>
						<key>strokeWidth</key>
						<real>6</real>
						<key>subnodes</key>
						<array>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<true/>
								<key>location</key>
								<string>{-1516.2578125, 85.90625}</string>
								<key>nodeID</key>
								<string>B1972AC0-0C54-4CA9-A57B-1BB65E857339</string>
								<key>strokeColor</key>
								<string>{0.747, 0.236, 0.101, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;{ARGV} the array contains each of the arguments passed to the running program.&lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 \{ARGV\}\uc0\u8232 the array contains each of the arguments passed to the running program.}</string>
								</dict>
							</dict>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<true/>
								<key>location</key>
								<string>{-1539.2578125, 149.90625}</string>
								<key>nodeID</key>
								<string>01714575-8D55-4ACF-9CB9-B506E3F82FC6</string>
								<key>strokeColor</key>
								<string>{0.747, 0.236, 0.101, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;{ARGF} is a special kind of I/O object that acts like all the contents of all the files whose names are passed on the command line&lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 \{ARGF\}\uc0\u8232 is a special kind of I/O object that acts like all the contents of all the files whose names are passed on the command line}</string>
								</dict>
							</dict>
						</array>
						<key>title</key>
						<dict>
							<key>constrainedWidth</key>
							<integer>300</integer>
							<key>htmlText</key>
							<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;[Command-Line Arguments]  pass in arguments. Theses are accessible in tow different ways.&lt;/p&gt;</string>
							<key>shrinkToFitContent</key>
							<integer>1</integer>
							<key>text</key>
							<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 [Command-Line Arguments]\uc0\u8232 \u8232 pass in arguments. Theses are accessible in tow different ways.}</string>
						</dict>
					</dict>
					<dict>
						<key>contentAlignment</key>
						<integer>1</integer>
						<key>fillColor</key>
						<string>{0.037, 0.160, 0.198, 1.000}</string>
						<key>isDecreasingBranchThickness</key>
						<true/>
						<key>isDrawingFill</key>
						<false/>
						<key>isLeftAligned</key>
						<false/>
						<key>location</key>
						<string>{-648.2578125, 260.89390432098776}</string>
						<key>nodeID</key>
						<string>88FFE9ED-21A1-48FD-8086-8C7D422AF548</string>
						<key>strokeColor</key>
						<string>{0.147, 0.571, 0.525, 1.000}</string>
						<key>strokeStyle</key>
						<integer>0</integer>
						<key>strokeWidth</key>
						<real>6</real>
						<key>subnodes</key>
						<array>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-286.2578125, 116.89390432098776}</string>
								<key>nodeID</key>
								<string>595C1A7E-C9C3-48DF-B19B-F61CAFD39F15</string>
								<key>strokeColor</key>
								<string>{0.147, 0.571, 0.525, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;Most of time, the actual numeric values of these constants are irrelevant. All you want to do is differentiate the directions.&lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 Most of time, the actual numeric values of these constants are irrelevant. All you want to do is differentiate the directions.}</string>
								</dict>
							</dict>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-286.2578125, 180.89390432098776}</string>
								<key>nodeID</key>
								<string>94B3B7B4-D1D4-4DDC-BDA3-8D6319284491</string>
								<key>strokeColor</key>
								<string>{0.147, 0.571, 0.525, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array>
									<dict>
										<key>contentAlignment</key>
										<integer>1</integer>
										<key>fillColor</key>
										<string>{0.037, 0.160, 0.198, 1.000}</string>
										<key>isDecreasingBranchThickness</key>
										<true/>
										<key>isDrawingFill</key>
										<false/>
										<key>isLeftAligned</key>
										<false/>
										<key>location</key>
										<string>{73.7421875, 180.89390432098776}</string>
										<key>nodeID</key>
										<string>D44938B3-2326-4F0B-80D1-33F4217807B0</string>
										<key>strokeColor</key>
										<string>{0.147, 0.571, 0.525, 1.000}</string>
										<key>strokeStyle</key>
										<integer>0</integer>
										<key>strokeWidth</key>
										<real>4</real>
										<key>subnodes</key>
										<array/>
										<key>title</key>
										<dict>
											<key>constrainedWidth</key>
											<integer>300</integer>
											<key>htmlText</key>
											<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;So symbols are often used as a key in hashes.&lt;/p&gt;</string>
											<key>shrinkToFitContent</key>
											<integer>1</integer>
											<key>text</key>
											<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 So symbols are often used as a key in hashes.}</string>
										</dict>
									</dict>
								</array>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;Ruby offers a cleaner alternative. {Symbols} are simply constant names that you do not have to predeclare and that are guaranteed to be unique. A symbol literal starts with a colon and is normally followed by some kind of name: walk(:north) look(:east) Ruby will take care of the symbol and guarantee that no matter where it appears in your program, a particular symbol will have the same value.   def walk(direction) 	if direction == :north 		#…. 	end end&lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 Ruby offers a cleaner alternative. \{Symbols\} are simply constant names that you do not have to predeclare and that are guaranteed to be unique. A symbol literal starts with a colon and is normally followed by some kind of name:\uc0\u8232 walk(:north)\u8232 look(:east)\u8232 Ruby will take care of the symbol and guarantee that no matter where it appears in your program, a particular symbol will have the same value. \u8232 \u8232 def walk(direction)\u8232 	if direction == :north\u8232 		#\'85.\u8232 	end\u8232 end}</string>
								</dict>
							</dict>
						</array>
						<key>title</key>
						<dict>
							<key>constrainedWidth</key>
							<integer>300</integer>
							<key>htmlText</key>
							<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;[Symbols]  Often, when programming, you nee to create a name for something significant. &lt;/p&gt;</string>
							<key>shrinkToFitContent</key>
							<integer>1</integer>
							<key>text</key>
							<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 [Symbols]\uc0\u8232 \u8232 Often, when programming, you nee to create a name for something significant. }</string>
						</dict>
					</dict>
					<dict>
						<key>contentAlignment</key>
						<integer>1</integer>
						<key>fillColor</key>
						<string>{0.037, 0.160, 0.198, 1.000}</string>
						<key>isDecreasingBranchThickness</key>
						<true/>
						<key>isDrawingFill</key>
						<false/>
						<key>isLeftAligned</key>
						<false/>
						<key>location</key>
						<string>{-648.2578125, 484.89390432098776}</string>
						<key>nodeID</key>
						<string>D6AFA3B0-F128-4E07-96B4-8836B0569058</string>
						<key>strokeColor</key>
						<string>{0.128, 0.463, 0.782, 1.000}</string>
						<key>strokeStyle</key>
						<integer>0</integer>
						<key>strokeWidth</key>
						<real>6</real>
						<key>subnodes</key>
						<array>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-337.2578125, 484.89390432098776}</string>
								<key>nodeID</key>
								<string>DE3FFEA8-7507-4346-BBCC-FCE5B229E72D</string>
								<key>strokeColor</key>
								<string>{0.128, 0.463, 0.782, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;most statements in Ruby return a value, which means you can use them as conditions. &lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 most statements in Ruby return a value, which means you can use them as conditions. }</string>
								</dict>
							</dict>
						</array>
						<key>title</key>
						<dict>
							<key>constrainedWidth</key>
							<integer>300</integer>
							<key>htmlText</key>
							<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;[Control Structures]  ruby has all usual control structures . &lt;/p&gt;</string>
							<key>shrinkToFitContent</key>
							<integer>1</integer>
							<key>text</key>
							<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 [Control Structures]\uc0\u8232 \u8232 ruby has all usual control structures . }</string>
						</dict>
					</dict>
					<dict>
						<key>contentAlignment</key>
						<integer>1</integer>
						<key>fillColor</key>
						<string>{0.037, 0.160, 0.198, 1.000}</string>
						<key>isDecreasingBranchThickness</key>
						<true/>
						<key>isDrawingFill</key>
						<false/>
						<key>isLeftAligned</key>
						<false/>
						<key>location</key>
						<string>{-648.2578125, 644.89390432098776}</string>
						<key>nodeID</key>
						<string>447D5B45-700B-438D-BEDF-3586170979A1</string>
						<key>strokeColor</key>
						<string>{0.713, 0.331, 0.520, 1.000}</string>
						<key>strokeStyle</key>
						<integer>0</integer>
						<key>strokeWidth</key>
						<real>6</real>
						<key>subnodes</key>
						<array>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-303.2578125, 548.89390432098776}</string>
								<key>nodeID</key>
								<string>C28261B7-0BDB-4A36-ACEB-F1E3FC48F10E</string>
								<key>strokeColor</key>
								<string>{0.713, 0.331, 0.520, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array>
									<dict>
										<key>attachment</key>
										<dict>
											<key>fileName</key>
											<string>638A69B9-E9F9-4805-A075-4BEA36D7B81B.png</string>
											<key>size</key>
											<string>{262.0637390561962, 73.218361396060345}</string>
											<key>type</key>
											<integer>2</integer>
										</dict>
										<key>contentAlignment</key>
										<integer>1</integer>
										<key>fillColor</key>
										<string>{0.037, 0.160, 0.198, 1.000}</string>
										<key>isDecreasingBranchThickness</key>
										<true/>
										<key>isDrawingFill</key>
										<true/>
										<key>isLeftAligned</key>
										<false/>
										<key>location</key>
										<string>{57.7421875, 548.89390432098776}</string>
										<key>nodeID</key>
										<string>8E75B4C0-3F20-41CE-80E1-E83D3264B10F</string>
										<key>strokeColor</key>
										<string>{0.713, 0.331, 0.520, 1.000}</string>
										<key>strokeStyle</key>
										<integer>0</integer>
										<key>strokeWidth</key>
										<real>4</real>
										<key>subnodes</key>
										<array/>
										<key>title</key>
										<dict>
											<key>constrainedWidth</key>
											<integer>300</integer>
											<key>htmlText</key>
											<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;Regular_Expresssion&lt;/p&gt;</string>
											<key>shrinkToFitContent</key>
											<integer>1</integer>
											<key>text</key>
											<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 Regular_Expresssion}</string>
										</dict>
									</dict>
								</array>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;A regular expression is simply a way of specifying a pattern of characters to be matched in a string.   /PATTERN/  -&amp;gt; /Perl|Pyton/  -&amp;gt; /ab+c/ : a string containing an a followed by one or more b and with a c.  -&amp;gt; /ab*c/: the pattern matches one a ,zero or more b&amp;apos;s and one c  -&amp;gt; A dot (.) matches(almost) any character. &lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 A regular expression is simply a way of specifying a pattern of characters to be matched in a string. \uc0\u8232 \u8232 /PATTERN/\u8232 \u8232 -&gt; /Perl|Pyton/\u8232 \u8232 -&gt; /ab+c/ : a string containing an a followed by one or more b and with a c.\u8232 \u8232 -&gt; /ab*c/: the pattern matches one a ,zero or more b's and one c\u8232 \u8232 -&gt; A dot (.) matches(almost) any character.\u8232 }</string>
								</dict>
							</dict>
						</array>
						<key>title</key>
						<dict>
							<key>constrainedWidth</key>
							<integer>300</integer>
							<key>htmlText</key>
							<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;[Regular Expressions]  regular expression support is typically built into only scripting language, such as Ruby.&lt;/p&gt;</string>
							<key>shrinkToFitContent</key>
							<integer>1</integer>
							<key>text</key>
							<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 [Regular Expressions]\uc0\u8232 \u8232 regular expression support is typically built into only scripting language, such as Ruby.}</string>
						</dict>
					</dict>
					<dict>
						<key>contentAlignment</key>
						<integer>1</integer>
						<key>fillColor</key>
						<string>{0.037, 0.160, 0.198, 1.000}</string>
						<key>isDecreasingBranchThickness</key>
						<true/>
						<key>isDrawingFill</key>
						<false/>
						<key>isLeftAligned</key>
						<false/>
						<key>location</key>
						<string>{-648.2578125, 1028.8939043209878}</string>
						<key>nodeID</key>
						<string>FD487F75-31A0-4C64-A979-6CEB157BC30D</string>
						<key>strokeColor</key>
						<string>{0.647, 0.468, 0.027, 1.000}</string>
						<key>strokeStyle</key>
						<integer>0</integer>
						<key>strokeWidth</key>
						<real>6</real>
						<key>subnodes</key>
						<array>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-286.2578125, 820.89390432098776}</string>
								<key>nodeID</key>
								<string>EECC1982-FD4D-4341-9821-F7A9792B55EC</string>
								<key>strokeColor</key>
								<string>{0.647, 0.468, 0.027, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;You can use code block to implement callbacks(but they are simpler than java anonymous inner classes.) &lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 You can use code block to implement callbacks(but they are simpler than java anonymous inner classes.) }</string>
								</dict>
							</dict>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-286.2578125, 884.89390432098776}</string>
								<key>nodeID</key>
								<string>AFA137FD-6C29-4D90-B867-89AA8894F054</string>
								<key>strokeColor</key>
								<string>{0.647, 0.468, 0.027, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;code block are just chunks of code between braces or between do…end . &lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 code block are just chunks of code between braces or between do\'85end . }</string>
								</dict>
							</dict>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-286.2578125, 932.89390432098776}</string>
								<key>nodeID</key>
								<string>8B8139B4-9671-433F-B74F-0B9EE0946F06</string>
								<key>strokeColor</key>
								<string>{0.647, 0.468, 0.027, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;A method can then invoke an associated block one or more times using the Ruby {yield} statement. You can think of {yield} as being something like a method call that invokes the block associated with the call to the method containing the yield.&lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 A method can then invoke an associated block one or more times using the Ruby \{yield\} statement. You can think of \{yield\} as being something like a method call that invokes the block associated with the call to the method containing the yield.}</string>
								</dict>
							</dict>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-286.2578125, 1044.8939043209878}</string>
								<key>nodeID</key>
								<string>CB358BE2-F1B5-4545-88BA-92A7729B0B1C</string>
								<key>strokeColor</key>
								<string>{0.647, 0.468, 0.027, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;You can provide arguments to the call to yield,and they will be passed to the block, Within the block, you list the names of the parameters to receive these arguments between vertical bars (|params …|). &lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 You can provide arguments to the call to yield,and they will be passed to the block, Within the block, you list the names of the parameters to receive these arguments between vertical bars (|params \'85|). }</string>
								</dict>
							</dict>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-286.2578125, 1140.8939043209878}</string>
								<key>nodeID</key>
								<string>CDBD8943-1B27-4AE1-825E-BB788A4E874B</string>
								<key>strokeColor</key>
								<string>{0.647, 0.468, 0.027, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;Code block are used throughout ruby library to implement iterators, which methods that return successive elements from some kind of collection. Many of the looping constructs that are built into languages such as C and java are imply method calls in Ruby, with the methods invoking the associated block zero or more times.&lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 Code block are used throughout ruby library to implement iterators, which methods that return successive elements from some kind of collection.\uc0\u8232 Many of the looping constructs that are built into languages such as C and java are imply method calls in Ruby, with the methods invoking the associated block zero or more times.}</string>
								</dict>
							</dict>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-286.2578125, 1300.8939043209878}</string>
								<key>nodeID</key>
								<string>0AD2C8A8-3C80-48EF-A7DE-F0FA93B42DF1</string>
								<key>strokeColor</key>
								<string>{0.647, 0.468, 0.027, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;We can ask an array to call the block once for each of its elements. &lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 We can ask an array to call the block once for each of its elements. }</string>
								</dict>
							</dict>
						</array>
						<key>title</key>
						<dict>
							<key>constrainedWidth</key>
							<integer>300</integer>
							<key>htmlText</key>
							<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;[Blocks and Iterators]  one of ruby&amp;apos;s particular strengths. code blocks, which are chunks of code you can associate with method invocations, almost as if they were parameters. &lt;/p&gt;</string>
							<key>shrinkToFitContent</key>
							<integer>1</integer>
							<key>text</key>
							<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 [Blocks and Iterators]\uc0\u8232 \u8232 one of ruby's particular strengths. code blocks, which are chunks of code you can associate with method invocations, almost as if they were parameters. }</string>
						</dict>
					</dict>
					<dict>
						<key>contentAlignment</key>
						<integer>1</integer>
						<key>fillColor</key>
						<string>{0.037, 0.160, 0.198, 1.000}</string>
						<key>isDecreasingBranchThickness</key>
						<true/>
						<key>isDrawingFill</key>
						<false/>
						<key>isLeftAligned</key>
						<false/>
						<key>location</key>
						<string>{-648.2578125, 1452.8939043209878}</string>
						<key>nodeID</key>
						<string>F3157E0A-8C02-4BD7-871C-91FDBD03994B</string>
						<key>strokeColor</key>
						<string>{0.450, 0.541, 0.020, 1.000}</string>
						<key>strokeStyle</key>
						<integer>0</integer>
						<key>strokeWidth</key>
						<real>6</real>
						<key>subnodes</key>
						<array>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-324.2578125, 1348.8939043209878}</string>
								<key>nodeID</key>
								<string>4A90C038-A8B6-4D2D-A60E-3B200AD3A53F</string>
								<key>strokeColor</key>
								<string>{0.450, 0.541, 0.020, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;{printf} which print its arguments under the control of a format string printf(&amp;quot;Number: %5.3f, \nString: %s\n&amp;quot;,1.23, &amp;quot;hello&amp;quot;)&lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 \{printf\}\uc0\u8232 which print its arguments under the control of a format string\u8232 printf("Number: %5.3f, \\nString: %s\\n",1.23, "hello")}</string>
								</dict>
							</dict>
							<dict>
								<key>contentAlignment</key>
								<integer>1</integer>
								<key>fillColor</key>
								<string>{0.037, 0.160, 0.198, 1.000}</string>
								<key>isDecreasingBranchThickness</key>
								<true/>
								<key>isDrawingFill</key>
								<false/>
								<key>isLeftAligned</key>
								<false/>
								<key>location</key>
								<string>{-324.2578125, 1444.8939043209878}</string>
								<key>nodeID</key>
								<string>9F96EB40-0F17-4632-B503-4CC819A26AE6</string>
								<key>strokeColor</key>
								<string>{0.450, 0.541, 0.020, 1.000}</string>
								<key>strokeStyle</key>
								<integer>0</integer>
								<key>strokeWidth</key>
								<real>5</real>
								<key>subnodes</key>
								<array/>
								<key>title</key>
								<dict>
									<key>constrainedWidth</key>
									<integer>300</integer>
									<key>htmlText</key>
									<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;Many ways to read input into your program. Probably the most traditional is to use the routine {gets}, which returns the next line from your program&amp;apos;s standard input stream: ---- 	line = gets 	print line ---- Because {gets} return nil, when it reach the end of input, you can use its return value in a loop function. &lt;/p&gt;</string>
									<key>shrinkToFitContent</key>
									<integer>1</integer>
									<key>text</key>
									<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 Many ways to read input into your program. Probably the most traditional is to use the routine \{gets\}, which returns the next line from your program's standard input stream:\uc0\u8232 ----\u8232 	line = gets\u8232 	print line\u8232 ----\u8232 Because \{gets\} return nil, when it reach the end of input, you can use its return value in a loop function. }</string>
								</dict>
							</dict>
						</array>
						<key>title</key>
						<dict>
							<key>constrainedWidth</key>
							<integer>300</integer>
							<key>htmlText</key>
							<string>&lt;p style='color: rgba(251, 244, 220, 1.000000); font: 14px "Helvetica Neue"; text-align: left; -cocoa-font-postscriptname: "HelveticaNeue"; '&gt;[Reading and Riting]  Ruby comes with a comprehensive I/O library.&lt;/p&gt;</string>
							<key>shrinkToFitContent</key>
							<integer>1</integer>
							<key>text</key>
							<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red251\green244\blue220;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf2 [Reading and Riting]\uc0\u8232 \u8232 Ruby comes with a comprehensive I/O library.}</string>
						</dict>
					</dict>
				</array>
				<key>title</key>
				<dict>
					<key>constrainedWidth</key>
					<integer>300</integer>
					<key>htmlText</key>
					<string>&lt;p style='color: rgba(0, 0, 255, 1.000000); font: 16px "Lucida Grande"; text-align: left; -cocoa-font-postscriptname: "LucidaGrande"; '&gt;Ruby_New&lt;/p&gt;</string>
					<key>shrinkToFitContent</key>
					<integer>1</integer>
					<key>text</key>
					<string>{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs32 \cf2 Ruby_New}</string>
				</dict>
			</dict>
		</array>
	</dict>
	<key>printInfo</key>
	<data>
	BAtzdHJlYW10eXBlZIHoA4QBQISEhAtOU1ByaW50SW5mbwGEhAhOU09iamVjdACFkoSE
	hBNOU011dGFibGVEaWN0aW9uYXJ5AISEDE5TRGljdGlvbmFyeQCUhAFpCJKEhIQITlNT
	dHJpbmcBlIQBKxZOU0hvcml6b250YWxseUNlbnRlcmVkhpKEhIQITlNOdW1iZXIAhIQH
	TlNWYWx1ZQCUhAEqhIQBY50BhpKEmZkNTlNSaWdodE1hcmdpboaShJuchIQBZp5IhpKE
	mZkMTlNMZWZ0TWFyZ2luhpKEm5ygnkiGkoSZmRVOU0hvcml6b25hbFBhZ2luYXRpb26G
	koSbnISXlwKGkoSZmRROU1ZlcnRpY2FsUGFnaW5hdGlvboaShJucpZcAhpKEmZkUTlNW
	ZXJ0aWNhbGx5Q2VudGVyZWSGkpqShJmZC05TVG9wTWFyZ2luhpKEm5ygnlqGkoSZmQ5O
	U0JvdHRvbU1hcmdpboaShJucoJ5ahoaG
	</data>
	<key>title</key>
	<string>Getting Start</string>
	<key>version</key>
	<integer>4</integer>
</dict>
</plist>
